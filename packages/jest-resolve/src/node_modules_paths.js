/**
 * Copyright (c) 2014, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Adapted from: https://github.com/substack/node-resolve
 *
 * @flow
 */

import type {Path} from 'types/Config';
import path from 'path';

type NodeModulesPathsOptions = {|
  moduleDirectory?: Array<string>,
  paths?: ?Array<Path>,
|};

function nodeModulesPaths(
  basedir: Path,
  options: NodeModulesPathsOptions,
): Path[] {
  const modules =
    options && options.moduleDirectory
      ? [].concat(options.moduleDirectory)
      : ['node_modules'];

  // ensure that `basedir` is an absolute path at this point,
  // resolving against the process' current working directory
  const basedirAbs = path.resolve(basedir);

  let prefix = '/';
  if (/^([A-Za-z]:)/.test(basedirAbs)) {
    prefix = '';
  } else if (/^\\\\/.test(basedirAbs)) {
    prefix = '\\\\';
  }

  const paths = [basedirAbs];
  let parsed = path.parse(basedirAbs);
  while (parsed.dir !== paths[paths.length - 1]) {
    paths.push(parsed.dir);
    parsed = path.parse(parsed.dir);
  }

  const dirs = paths.reduce((dirs, aPath) => {
    return dirs.concat(
      modules.map(moduleDir => {
        return path.join(prefix, aPath, moduleDir);
      }),
    );
  }, []);

  return options.paths ? dirs.concat(options.paths) : dirs;
}

module.exports = nodeModulesPaths;
